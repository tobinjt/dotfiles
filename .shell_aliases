#!/bin/bash

# ls needs different options to enable colour :/
if ls --color=always &> /dev/null; then
  # Linux.
  alias ls='ls --color=auto -F'
else
  # OS X.
  alias ls='ls -G -F'
fi

alias mv="mv -i"
alias cp="cp -i -p"
alias grep='grep --color=auto'
alias python="python3"

cd() {
  cd_helper cd "$@"
}
pushd() {
  cd_helper pushd "$@"
}
cdpwd() {
  builtin cd "$(pwd -P)"
}

alias ta='tmux_attach'

top() {
  local -a top_args
  # top on Mac OS X does not sort by CPU by default; fix that.
  if is_mac_os; then
    top_args=(-o cpu)
  fi
  TOP="$((${LINES:-24} - 7))" command top "${top_args[@]}" "$@"
}

# git sets better options if $LESS is unset.
git() {
    # MacOS env doesn't have --unset.
    (unset LESS; command git "$@")
}
# hg sets better options if $LESS is unset.
hg() {
    # MacOS env doesn't have --unset.
    (unset LESS; command hg "$@")
}


# Load .bcrc to have some helper stuff, but only when running interactively.
bc() {
  if [ -t 0 ] && [ "$#" -eq 0 ]; then
    command bc -q -i "${HOME}/.bcrc"
  else
    command bc -q "$@"
  fi
}

scp() {
  # Do not set up the ControlMaster socket because scp does not set up SSH
  # forwarding, so if I ssh over an scp ControlMaster ssh forwarding doesn't
  # work.
  command scp -o ControlMaster=no "$@"
}

assh() {
  # Disable autossh monitoring because I have ssh configured to monitor
  # connectivity.  Allocate a pseudo-tty.
  # Run a shell (the correct shell on the remote end, hence single quotes):
  # - as a login shell so it sources the correct files (necessary for bash,
  #   unnecessary for zsh)
  # - execute the function 'tmux_attach'
  # shellcheck disable=SC2016
  autossh -M 0 -t "$@" '${SHELL}' -l -c tmux_attach
}

irssi() {
  TERM=xterm-color command irssi "$@"
}

shell_functions() {
  set | grep '() $'
}

countsort() {
  sort "$@" | uniq -c | sort -n
}

only_duplicates() {
  fmt -1 "$@" | sort | uniq -d | xargs echo
}

timestamp-to-human-localtime() {
  perl -Mstrict -n -e 'print scalar localtime $_, qq{\n}'
}

# Wrappers around 'go doc'.
godocl() {
  go doc "$@" | less
}
godocf() {
  go doc "$@" | grep ^func
}
godocserver() {
  printf "http://localhost:12345/\\n"
  godoc --http=:12345
}
gocdpkg() {
  local pdir
  pdir="$(go list -f '{{ .Dir }}' "$1")"
  if [ -z "${pdir}" ]; then
    printf "no directory found for pkg %s\\n" "$1"
    return 1
  fi
  cd "${pdir}" || return
}

# Strip the directory from a file.
vimf() {
  vim "$(basename "$1")"
}

# grep for something and output in vim quickfix format.
cfile() {
  if [[ -n "$(type rg 2> /dev/null)" ]]; then
    if [[ -t 1 ]]; then
      rg -n --hidden --glob '!.git/**' "$@"
    else
      rg -n --hidden --glob '!.git/**' "$@" | LC_ALL=C natural_sort
    fi
  else
    if is_mac_os; then
      # MacOS grep doesn't automatically add the current directory like GNU
      # grep.  This workaround isn't ideal: if I pass a filename the directory
      # will still be added.
      grep -r -n "$@" .
    else
      grep -r -n "$@"
    fi
  fi
}

# Load errors from $1.
vim-cfile() {
  vim -c ':cfile '"$1"' | :cwindow'
}

vim-grep() {
  local tmpfile
  tmpfile="$(mktemp -t vim-grep.XXXXXXXXXXXX)"
  cfile "$@" > "${tmpfile}"
  vim-cfile "${tmpfile}"
  rm -f "${tmpfile}"
}

# Handy link to airport utility.
airport() {
  # shellcheck disable=SC2039
  local file="/System/Library/PrivateFrameworks/Apple80211.framework/Versions"
  file="${file}/A/Resources/airport"
  "${file}" "$@"
}

# Homebrew installs pip as pip3, so wrap it.
# Also let Python write bytecode for future speed.
pip() {
  (unset PYTHONDONTWRITEBYTECODE; pip3 "$@")
}
pip3() {
  (unset PYTHONDONTWRITEBYTECODE; command pip3 "$@")
}

# What's using an external disk?
using_external_disk() {
  sudo lsof -M -n -P | grep /Volumes
}

# I can never remember mdfind and locate is muscle-memory.
spotlight() {
  mdfind "$@"
}
locate() {
  mdfind "$@"
}

process_on_port() {
  netstat -n -p tcp -v | grep -e Proto -e "$1"
}

cleanup-fate-world-of-adventure() {
  (set -e; cleanup-fate-world-of-adventure-real "$@")
}
cleanup-fate-world-of-adventure-real() {
  local filename="$1" new_filename
  new_filename="${filename/_o_A_World_of_Adventure_for_Fate_Core/}"
  new_filename="${new_filename//_/ }"
  mv "${filename}" "${new_filename}"
  # Spaces need to be escaped so that scp doesn't complain about "ambiguous
  # target"
  local destdir="${HOME}/Media/Games/Fate/World\\ of\\ Adventure/"
  scp "${new_filename}" home:"${destdir}"
  rm -i "${new_filename}"
}

ipytest() {
  # Run pytest when the test file changes.
  if [[ "$#" -eq 0 ]]; then
    echo "ipytest: expecting at least one filename." >&2
    return 1
  fi
  if is_mac_os; then
    ipytest_macos "$@"
  else
    ipytest_linux "$@"
  fi
}

ipytest_linux() {
  pytest-3 "$@"
  while true; do
    inotifywait --quiet "$@"
    pytest-3 "$@"
  done
}

ipytest_macos() {
  pytest "$@"
  # Use -n2 rather than -n1 because saving a file in vim seems to cause two
  # changes.
  fswatch -o "$@" | xargs -n2 -I{} pytest "$@"
}

igotest() {
  # Run go test when any inputs change.
  if [[ "$#" -ne 0 ]]; then
    echo "igotest: no arguments accepted" >&2
    return 1
  fi
  if is_mac_os; then
    #shellcheck disable=SC2119
    igotest_macos
  else
    #shellcheck disable=SC2119
    igotest_linux
  fi
}

igotest_linux() {
  go test
  while true; do
    inotifywait --quiet -- *.go
    go test
  done
}

igotest_macos() {
  go test
  # Use -n2 rather than -n1 because saving a file in vim seems to cause two
  # changes.
  fswatch -o -- *.go | xargs -n2 -I{} go test
}

igocover() {
  # Run go cover when any inputs change.
  if [[ "$#" -ne 0 ]]; then
    echo "igocover: no arguments accepted" >&2
    return 1
  fi
  if is_mac_os; then
    #shellcheck disable=SC2119
    igocover_macos
  else
    #shellcheck disable=SC2119
    igocover_linux
  fi
}

igocover_linux() {
  gocover
  while true; do
    inotifywait --quiet -- *.go
    gocover
  done
}

igocover_macos() {
  gocover
  # Use -n2 rather than -n1 because saving a file in vim seems to cause two
  # changes.
  fswatch -o -- *.go | xargs -n2 -I{} gocover
}

iphpunit() {
  # Run phpunit when the test file changes.
  if is_mac_os; then
    iphpunit_macos
  else
    iphpunit_linux
  fi
}

iphpunit_linux() {
  phpunit
  while true; do
    inotifywait --quiet .
    phpunit
  done
}

iphpunit_macos() {
  phpunit
  # Use -n2 rather than -n1 because saving a file in vim seems to cause two
  # changes.
  fswatch -o ./**/*.php | xargs -n2 -I{} phpunit
}

# Local stuff
local_shell_aliases="${HOME}/.shell_aliases-local"
if [ -f "${local_shell_aliases}" ]; then
  # shellcheck disable=SC1090
  . "${local_shell_aliases}"
fi
