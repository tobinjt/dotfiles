#!/bin/bash

# ls needs different options to enable colour :/
if ls --color=always &> /dev/null; then
  # Linux.
  alias ls='ls --color=auto -F'
else
  # OS X.
  alias ls='ls -G -F'
fi

alias mv="mv -i"
alias cp="cp -i -p"
alias grep='grep --color=auto'

cd() {
  cd_helper cd "$@"
}
pushd() {
  cd_helper pushd "$@"
}

alias ta='tmux_attach'

top() {
  local top_args=""
  # top on Mac OS X does not sort by CPU by default; fix that.
  if [ "${OSTYPE#darwin}" != "${OSTYPE}" ]; then
    top_args="-o cpu"
  fi
  # shellcheck disable=SC2086
  TOP="$((${LINES:-24} - 7))" command top ${top_args} "$@"
}

# git sets better options if $LESS is unset.
git() {
    # MacOS env doesn't have --unset.
    (unset LESS; command git "$@")
}
# hg sets better options if $LESS is unset.
hg() {
    # MacOS env doesn't have --unset.
    (unset LESS; command hg "$@")
}


# Load .bcrc to have some helper stuff, but only when running interactively.
bc() {
  if [ -t 0 ] && [ "$#" -eq 0 ]; then
    command bc -q -i "${HOME}/.bcrc"
  else
    command bc "$@"
  fi
}

scp() {
  # Do not set up the ControlMaster socket because scp does not set up SSH
  # forwarding, so if I ssh over an scp ControlMaster ssh forwarding doesn't
  # work.
  command scp -o ControlMaster=no "$@"
}

assh() {
  # Disable autossh monitoring because I have ssh configured to monitor
  # connectivity.  Allocate a pseudo-tty.
  # Run bash:
  # - as a login shell so it sources the correct files
  # - interactively because my configs only define aliases when interactive
  # - execute the function 'tmux_attach'
  autossh -M 0 -t "$@" bash -l -i -c tmux_attach
}

irssi() {
  TERM=xterm-color command irssi "$@"
}

shell_functions() {
  set | grep '() $'
}

countsort() {
  sort "$@" | uniq -c | sort -n
}

only_duplicates() {
  fmt -1 "$@" | sort | uniq -d | xargs echo
}

timestamp-to-human-localtime() {
  perl -Mstrict -n -e 'print scalar localtime $_, qq{\n}'
}

# Wrappers around 'go doc'.
godocl() {
  go doc "$@" | less
}
godocf() {
  go doc "$@" | grep ^func
}
godocserver() {
  printf "http://localhost:12345/\\n"
  godoc --http=:12345
}
gocdpkg() {
  local pdir
  pdir="$(go list -f '{{ .Dir }}' "$1")"
  if [ -z "${pdir}" ]; then
    printf "no directory found for pkg %s\\n" "$1"
    return 1
  fi
  cd "${pdir}" || return
}

# Strip the directory from a file.
vimf() {
  vim "$(basename "$1")"
}

# Load errors from $1.
vim-cfile() {
  vim -c ':cfile '"$1"' | :cwindow'
}

vim-grep() {
  if [[ "$#" -eq 1 ]]; then
    set -- "$1" "."
  fi
  local tmpfile
  tmpfile="$(mktemp -t vim-grep.XXXXXXXXXXXX)"
  local pattern="$1"
  shift
  grep -r -n "${pattern}" "$@" > "${tmpfile}"
  vim-cfile "${tmpfile}"
  rm -f "${tmpfile}"
}

# Handy link to airport utility.
airport() {
  # shellcheck disable=SC2039
  local file="/System/Library/PrivateFrameworks/Apple80211.framework/Versions"
  file="${file}/A/Resources/airport"
  "${file}" "$@"
}

# Homebrew installs pip as pip3, so wrap it.
# Also let Python write bytecode for future speed.
pip() {
  (unset PYTHONDONTWRITEBYTECODE; pip3 "$@")
}

# What's using an external disk?
using_external_disk() {
  sudo lsof -M -n -P | grep /Volumes
}

# I can never remember mdfind.
spotlight() {
  mdfind "$@"
}

process_on_port() {
  netstat -n -p tcp -v  | grep -e Proto -e "$1"
}

cleanup-fate-world-of-adventure() {
  (set -e; cleanup-fate-world-of-adventure-real "$@")
}
cleanup-fate-world-of-adventure-real() {
  local filename="$1" new_filename
  new_filename="${filename/_o_A_World_of_Adventure_for_Fate_Core/}"
  new_filename="${new_filename//_/ }"
  mv "${filename}" "${new_filename}"
  # Spaces need to be escaped so that scp doesn't complain about "ambiguous
  # target"
  local destdir="${HOME}/Media/Games/Fate/World\\ of\\ Adventure/"
  scp "${new_filename}" home:"${destdir}"
  rm -i "${new_filename}"
}
