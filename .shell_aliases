#!/bin/bash

# keep-sorted start
alias cp="cp -i -p"
alias grep='grep --color=auto'
alias ls='ls --color=auto -F'
alias mv="mv -i"
# Homebrew installs pip as pip3, so wrap it.
# Let Python write bytecode for future speed.
alias pip3="PYTHONPYCACHEPREFIX= PYTHONDONTWRITEBYTECODE= pip3"
alias pip="PYTHONPYCACHEPREFIX= PYTHONDONTWRITEBYTECODE= pip3"
alias python="python3"
alias ta='tmux_attach'
# keep-sorted end

rename-window-while-command-runs() {
  local window_name="$1"
  shift
  if [[ -n "${TMUX_PANE:-}" ]]; then
    tmux rename-window -t "${TMUX_PANE}" "${window_name}"
  fi
  local exit_status=0
  "$@" || exit_status="$?"
  if [[ -n "${TMUX_PANE:-}" ]]; then
    tmux rename-window -t "${TMUX_PANE}" ""
  fi
  return "${exit_status}"
}

gemini () {
  GEMINI_API_KEY="$(< "${HOME}/.config/gemini/api_key")" \
    rename-window-while-command-runs gemini command gemini "$@"
}

lazygit () {
  rename-window-while-command-runs lazygit \
    command lazygit --use-config-file "${HOME}/.config/lazygit/config.yml" "$@"
}

# Function to be run every time my prompt is displayed.
prompt_command() {
  exit_status="$?"
  # Exit status 146/148 happens when you suspend something.
  case "${exit_status}" in
    0|146|148)
      :
      ;;
    *)
      printf "\\033[01;31mExit status: %s\\033[0m\\n" "${exit_status}"
      ;;
  esac
  prompt_command_shell_specific
  prompt_command_extras
}
prompt_command_shell_specific() {
  true
}
prompt_command_extras() {
  true
}

# keep-sorted start block=yes newline_separated=yes
# Load .bcrc to have some helper stuff, but only when running interactively.
bc() {
  if [ -t 0 ] && [ "$#" -eq 0 ]; then
    command bc -q -i "${HOME}/.bcrc"
  else
    command bc -q "$@"
  fi
}

# 'cd dirname/filename' will strip filename and cd to dirname.
cd() {
  # Try running cd with the arguments and see what happens.
  if builtin cd "$@" 2> /dev/null; then
    return
  fi
  if [[ "$#" -gt 1 ]]; then
    printf "cd: only one argument supported for non-builtin operation.\\n" >&2
    return 1
  fi

  local dest="$1" orig_dest="$1"
  dest="$(dirname "${dest}")"
  #Â dirname will output "." if there isn't a directory in $dest, e.g. when $dest
  # is ~?bin; that indicates an error.
  if [[ "${dest}" == "." ]]; then
    printf "cd: %s: No such file or directory\\n" "${orig_dest}" >&2
    return 1
  fi
  # shellcheck disable=SC2164
  builtin cd "${dest}"
}

countsort() {
  sort "$@" | uniq -c | sort -n
}

diff() {
  if [[ -n "${ZSH_VERSION:-}" ]]; then
    # We need to explicitly split in Zsh.
    "${=DIFF}" "$@"
  else
    # Unquoted so that splitting occurs.
    ${DIFF} "$@"
  fi
}

# Wrap rg so that in a dotfiles directory it searches hidden files but skips
# .git directories.
rg() {
  if echo "${PWD}" | grep -q dotfiles; then
    # Searching in a dotfiles directory, include dotfiles.
    command rg -n --with-filename --hidden --glob '!.git' --ignore "$@"
  else
    command rg "$@"
  fi
}

scp() {
  # Do not set up the ControlMaster socket because scp does not set up SSH
  # forwarding, so if I ssh over an scp ControlMaster ssh forwarding doesn't
  # work.
  command scp -o ControlMaster=no "$@"
}

top() {
  local -a top_args
  # top on Mac OS X does not sort by CPU by default; fix that.
  if is_mac_os; then
    top_args=(-o cpu)
  fi
  TOP="$((${LINES:-24} - 7))" command top "${top_args[@]}" "$@"
}
# keep-sorted end

# Local stuff
local_shell_aliases="${HOME}/.shell_aliases-local"
if [ -f "${local_shell_aliases}" ]; then
  . "${local_shell_aliases}"
fi
