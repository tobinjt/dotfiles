#!/bin/sh

# flags to pass to gcc
CFLAGS=""
# switches to make gcc use only ansi c + complain
#CFLAGS="$CFLAGS -ansi -pedantic"
# Use pipes rather than files for communication
CFLAGS="$CFLAGS -pipe"
# enable debugging
CFLAGS="$CFLAGS -g -ggdb"
# some problems are only picked up when the flow control information
# constructed by the optimiser is examined. and optimisation is good anyway :)
CFLAGS="$CFLAGS -O2"
# make variable names more portable
CFLAGS="$CFLAGS -fno-dollars-in-identifiers"
# assigning different types is bad, and non-constant constants worse.
CFLAGS="$CFLAGS -fno-cond-mismatch" # -fno-writable-strings"
# might as well cut down on function call overhead for simple functions.
CFLAGS="$CFLAGS -finline-functions"
# but make sure that we also have non-inlined code and static const variables
# Why do I do this?
#CFLAGS="$CFLAGS -fkeep-inline-functions -fkeep-static-consts"
# Generate traps for signed overflow.
CFLAGS="$CFLAGS -ftrapv"
# for debugging purposes
CFLAGS="$CFLAGS -g -fno-omit-frame-pointer"
# Helps with debugging, but stoopid solaris's libc needs libdl regardless.
#CFLAGS="$CFLAGS -static"
# warnings - enable all the standard warnings
CFLAGS="$CFLAGS -Wall"
# additional misc warnings
CFLAGS="$CFLAGS -W"
# check for dangerous formats in printf et al.
CFLAGS="$CFLAGS -Wformat-nonliteral -Wformat-security"
# does one variable declaration supercede another?
# Causes major problems with glib-2.0 - many many shadowings.
#CFLAGS="$CFLAGS -Wshadow -Wredundant-decls"
# am i evaluating undefined identifiers in #if's?
CFLAGS="$CFLAGS -Wundef"
# Warn about unused macros.  This might be far too much hassle.
CFLAGS="$CFLAGS -Wunused-macros"
# am I trying to compare floating point values?
CFLAGS="$CFLAGS -Wfloat-equal"
# Warn about padded structs.  Might be too much hassle.
#CFLAGS="$CFLAGS -Wpadded"
# Warn about unreachable code.
CFLAGS="$CFLAGS -Wunreachable-code"
# am i trying to do dodgy things with void pointers?
CFLAGS="$CFLAGS -Wpointer-arith"
# check for const -> non-const pointers changes
CFLAGS="$CFLAGS -Wcast-qual -Wcast-align"
# checks for dodgy type conversions in function calls, if mixing
# prototyped/non-prototyped functions.  Causes too much noise for me, especially
# when using Vim's quickfix mode.
#CFLAGS="$CFLAGS -Wconversion"
# check for functions that return whole structures etc instead of pointers
CFLAGS="$CFLAGS -Waggregate-return"
# make sure that prototypes are properly declared for every function
CFLAGS="$CFLAGS -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations"
# warn if functions to be inlined aren't. maybe this is a bad idea when
# optimising?
CFLAGS="$CFLAGS -Winline"
# abort compilation on warnings
#CFLAGS="$CFLAGS -Werror"
# make "strings" const char [] so that assigning to non-const pointers gives a
# warning 
CFLAGS="$CFLAGS -Wwrite-strings"
# warn about trigraphs - I don't use them, so if any are found they'll need to
# be escaped
CFLAGS="$CFLAGS -Wtrigraphs"
# warn when return values are badly cast 
CFLAGS="$CFLAGS -Wbad-function-cast"
# ansi c <-> traditional c conflicts
#CFLAGS="$CFLAGS -Wtraditional"
# warn about signed <-> unsigned comparisons
CFLAGS="$CFLAGS -Wsign-compare"
# tell me if gcc thinks a function will never return
CFLAGS="$CFLAGS -Wmissing-noreturn"
# tell me if a function that was supposed to be inlined wasn't
CFLAGS="$CFLAGS -Winline"
export CFLAGS
alias gcc="$CC $CFLAGS";

# flags to pass to yacc
YFLAGS="--defines --debug --verbose"
export YFLAGS
#alias bison="bison $YFLAGS"
#alias yacc="bison $YFLAGS"


# flags to pass to lex
LFLAGS="-d -i -s"
export LFLAGS
#alias flex="flex $LFLAGS"
#alias lex="flex $LFLAGS"
