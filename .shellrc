#!/bin/bash

# Shell-neutral environment variables needed for interactive shells.
# We do enough to set $PATH, then check for being an interactive shell: if we're
# not interactive we skip everything else.

# Set up $PATH.
# I always want /usr/local first in $PATH.
PATH="/usr/local/bin:/usr/local/sbin:${PATH}:/sbin:/usr/sbin"
# Add Homebrew's Apple silicon directory to $PATH if it exists.
if [ -d "/opt/homebrew/bin" ]; then
  PATH="/opt/homebrew/bin:/opt/homebrew/sbin:${PATH}"
fi
# Where Go should install stuff.  Set here so that it can be used in $PATH.
GOPATH="${HOME}/tmp/go"
if [ -d "${GOPATH}" ]; then
  PATH="${GOPATH}/bin:${PATH}"
fi
# Add Rust to $PATH if it exists.
if [ -d "${HOME}/.cargo/bin" ]; then
  PATH="${HOME}/.cargo/bin:${PATH}"
fi
# Add tools installed using virtualenv, after the rest of $PATH, so they don't
# mess with the standard Python binary.
virtualenv_dir="${HOME}/tmp/virtualenv"
if [ -d "${virtualenv_dir}" ]; then
  for dir in "${virtualenv_dir}"/*/bin; do
    # Skip the dated directories.
    if [ "${dir%%-20*}" = "${dir}" ]; then
      PATH="${PATH}:${dir}"
    fi
  done
fi
# Add tools installed by Neovim's Mason.
if [ -d "${HOME}/.local/share/nvim/mason/bin" ]; then
  PATH="${PATH}:${HOME}/.local/share/nvim/mason/bin"
fi
PATH="${HOME}/bin:${PATH}"
# EDITOR is set here so that it's correct when running non-interactively, e.g.
# when sshing in to run update-dotfiles-and-bin, which runs git pull, which
# needs a commit message for merges.
if type nvim >& /dev/null; then
  EDITOR="nvim"
else
  EDITOR="vim"
fi
export EDITOR GOPATH PATH

# Make a tmp dir if necessary.
if [ ! -d "${HOME}/tmp" ]; then
  mkdir -m 0700 "${HOME}/tmp"
fi

# Umask is here so that it's set when scp(1)ing.
umask 022

# Local non-interactive stuff
local_shellrc="${HOME}/.shellrc-local"
if [ -f "${local_shellrc}" ]; then
  . "${local_shellrc}"
fi

# Be careful not to break $PATH if deduplicate_path fails.
new_PATH="$(deduplicate_path "${PATH}")"
if [ -n "${new_PATH}" ]; then
  PATH="${new_PATH}"
else
  printf "Warning: deduplicate_path failed!\\n" >&2
fi

if [ "$-" = "${-//i/}" ]; then
  # This is not an interactive shell, skip everything else in this file.
  return
fi

## Python.
MYPY_CACHE_DIR="${HOME}/tmp/mypy_cache"
PYTHONDONTWRITEBYTECODE="No .pyc files please"
# Set breakpoint() in Python to call pudb; untested.
PYTHONBREAKPOINT="pudb.set_trace"
export MYPY_CACHE_DIR PYTHONDONTWRITEBYTECODE PYTHONBREAKPOINT

## Homebrew.
# Don't install from source if fetching the bottle fails.
HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK=1
export HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK

if command -v git > /dev/null 2>&1; then
  DIFF="git --no-pager diff --no-index"
else
  DIFF="diff -u"
fi
# Sort filenames as I expect them to be sorted, regardless of locale.
LC_COLLATE="C"
# smart case matching; long prompt; suppress dumb terminal error messages;
# allow ANSI colour escape sequences; highlight the first new line when
# moving through the file; exit immediately if the contents can be displayed on
# a single screen.
LESS="iMdRWF"
PAGER="less"
# Don't create or use a shared connection for rsync.
RSYNC_RSH="ssh -o ControlPath=none"
# Disable shellcheck warnings about not checking sourced files.
SHELLCHECK_OPTS="-e SC1090 -e SC1091"
export DIFF LC_COLLATE LESS PAGER RSYNC_RSH SHELLCHECK_OPTS

if [ -n "${TMUX:-}" ] && [ "${USER}" != "johntobin" ]; then
  # Put the user in the tmux pane title to warn me it's a different user.
  tmux rename-window -t "${TMUX_PANE}" "${USER}"
fi

# Local interactive stuff
local_shellrc="${HOME}/.shellrc-local-interactive"
if [ -f "${local_shellrc}" ]; then
  . "${local_shellrc}"
fi
