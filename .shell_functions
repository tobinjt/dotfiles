#!/bin/bash

#Â Shell-neutral functions.

# Remove duplicate elements from a $PATH-like variable while preserving order.
# This cannot use gawk features because it needs to be portable to Mac OS X.
deduplicate_path() {
  awk -F : \
      'BEGIN { output = ""; };
       { for (i = 1; i <= NF; i++) {
           if (!($i in seen)) {
             seen[$i] = 1;
             output = output ":" $i;
           }
         }
       }
       END { sub("^:", "", output); print output; }' <<< "$1"
}

update_ssh_auth_sock() {
  # Any shell running under tmux should already have the right environment.
  if [ -n "${TMUX:-}" ]; then
    return
  fi
  if [ -z "${ORIG_SSH_AUTH_SOCK:-}" ]; then
    ORIG_SSH_AUTH_SOCK="${SSH_AUTH_SOCK}"
    readonly ORIG_SSH_AUTH_SOCK
  fi
  local dir="${HOME}/tmp/ssh"
  if [ ! -d "${dir}" ]; then
    mkdir -p "${dir}"
    chmod 700 "${dir}"
  fi
  SSH_AUTH_SOCK="${dir}/ssh-auth-sock-${HOSTNAME}-${USER}"
  ln -s -f -n "${ORIG_SSH_AUTH_SOCK}" "${SSH_AUTH_SOCK}"
}

# Function to be run every time my prompt is displayed.
function prompt_command() {
  exit_status="$?"
  # Exit status 146/148 happens when you suspend something.
  case "${exit_status}" in
    0|146|148)
      :
      ;;
    *)
      printf "\\033[01;31mExit status: %s\\033[0m" "${exit_status}"
      ;;
  esac
  if [ -z "${TMUX:-}" ]; then
    # Set the xterm title.  Tmux does this if it's running.
    printf "\\033]0;%s on %s\\007" "${SHELL##*/}" "${HOSTNAME}"
  fi
  if [ "${USER}" != "johntobin" ]; then
    # Put the user in the tmux pane title to warn me it's a different user.
    printf "\\033k%s\\033\\" "${USER}"
  else
    # Clear the pane title tmux sets - 'bash' is not informative.
    printf "\\033k\\033\\"
  fi
  update_ssh_auth_sock
  prompt_command_shell_specific
  prompt_command_extras
}
prompt_command_shell_specific() {
  true
}
prompt_command_extras() {
  true
}
