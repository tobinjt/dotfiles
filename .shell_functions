#!/bin/bash

# Shell-neutral functions that might realistically be used by other code.
# Aliases and functions intended solely for interactive use belong in
# .shell_aliases.

# 'cd dirname/filename' will strip filename and cd to dirname.
cd_helper() {
  if [[ "$#" -eq 0 ]]; then
    printf "Usage: cd_helper cd|pushd ARGS\\n" >&2
    return 1
  fi
  local cmd="$1"
  shift

  # Try running the builtin with the arguments and see what happens.
  if builtin "${cmd}" "$@" 2> /dev/null; then
    return
  fi
  if [[ "$#" -gt 1 ]]; then
    printf "%s: only one argument supported for non-builtin operation.\\n" \
      "${cmd}" >&2
    return 1
  fi

  local dest="$1" orig_dest="$1"
  dest="$(dirname "${dest}")"
  # dirname will output "." if there isn't a directory in $dest, e.g. when $dest
  # is ~?bin; that indicates an error.
  if [[ "${dest}" == "." ]]; then
    printf "%s: %s: No such file or directory\\n" "${cmd}" "${orig_dest}" >&2
    return 1
  fi
  builtin "${cmd}" "${dest}"
}

# Remove duplicate elements from a $PATH-like variable while preserving order.
# This cannot use gawk features because it needs to be portable to Mac OS X.
deduplicate_path() {
  awk -F : \
      'BEGIN { output = ""; };
       { for (i = 1; i <= NF; i++) {
           if (!($i in seen)) {
             seen[$i] = 1;
             output = output ":" $i;
           }
         }
       }
       END { sub("^:", "", output); print output; }' <<< "$1"
}

# Function to be run every time my prompt is displayed.
function prompt_command() {
  exit_status="$?"
  # Exit status 146/148 happens when you suspend something.
  case "${exit_status}" in
    0|146|148)
      :
      ;;
    *)
      printf "\\033[01;31mExit status: %s\\033[0m\\n" "${exit_status}"
      ;;
  esac
  if [ -z "${TMUX:-}" ]; then
    # Set the xterm title.  Tmux does this if it's running.
    printf "\\033]0;%s on %s\\007" "${SHELL##*/}" "${HOSTNAME}"
  else
    if [ "${USER}" != "johntobin" ]; then
      # Put the user in the tmux pane title to warn me it's a different user.
      tmux rename-window -t "${TMUX_PANE}" "${USER}"
    fi
  fi
  prompt_command_shell_specific
  prompt_command_extras
}
prompt_command_shell_specific() {
  true
}
prompt_command_extras() {
  true
}
