#!/bin/bash

# Shell-neutral functions that might realistically be used by other code.
# Aliases and functions intended solely for interactive use belong in
# .shell_aliases.

is_mac_os() {
  [ "${OSTYPE#darwin}" != "${OSTYPE}" ]
}

# 'cd dirname/filename' will strip filename and cd to dirname.
cd_helper() {
  if [ "$#" -lt 1 ]; then
    printf "cd_helper: Expecting exactly one or two arguments\\n" >&2
    return 1
  fi
  local cmd="$1"
  if [ "$#" -gt 2 ]; then
    printf "%s: Expecting exactly zero or one arguments\\n" "${cmd}" >&2
    return 1
  fi
  # Support "cd" with no arguments.
  if [ "$#" -eq 1 ]; then
    builtin "${cmd}"
    return
  fi
  # Support "cd -".
  if [ "$2" == '-' ]; then
    builtin "${cmd}" "-"
    return
  fi

  local dest="$2"
  if [ -d "${dest}" ]; then
    builtin "${cmd}" "${dest}"
    return
  fi
  dest="$(dirname "${dest}")"
  # dirname will output "." if there isn't a directory in $dest, e.g. when $dest
  # is ~?bin; that indicates an error.
  if [ "${dest}" == "." ]; then
    printf "%s: %s: No such file or directory\\n" "${cmd}" "${2}" >&2
    return 1
  fi
  builtin "${cmd}" "${dest}"
}

# Attach to a tmux session or start a new one.
tmux_attach() {
  # shellcheck disable=SC2119
  update_ssh_auth_sock
  # -D -A only works with named sessions.
  # Set the name of the first window to ''.
  tmux new-session -D -A -s "${USER}" -n ''
}

# Remove duplicate elements from a $PATH-like variable while preserving order.
# This cannot use gawk features because it needs to be portable to Mac OS X.
deduplicate_path() {
  awk -F : \
      'BEGIN { output = ""; };
       { for (i = 1; i <= NF; i++) {
           if (!($i in seen)) {
             seen[$i] = 1;
             output = output ":" $i;
           }
         }
       }
       END { sub("^:", "", output); print output; }' <<< "$1"
}

# I might manually call this with -f, so disable the check.
# shellcheck disable=SC2120
update_ssh_auth_sock() {
  local force_update=0
  if [ "$#" -eq 1 ] && [ "$1" == "-f" ]; then
    force_update=1
  fi
  if [ -z "${SSH_AUTH_SOCK:-}" ]; then
    if [ -n "${SUDO_USER:-}" ]; then
      # No ssh forwarding when using sudo, so don't complain.
      return
    fi
    printf "Empty SSH_AUTH_SOCK!  ssh forwarding broken?\\n" >&2
    return 1
  fi

  local dir="${HOME}/tmp/ssh"
  if [ ! -d "${dir}" ]; then
    mkdir -p "${dir}"
    chmod 700 "${dir}"
  fi
  if [ -z "${ORIG_SSH_AUTH_SOCK:-}" ]; then
    if grep -q "${dir}" <<<"${SSH_AUTH_SOCK}"; then
      printf "\$%s is already in %s, but \$%s is not set\\n" \
        "SSH_AUTH_SOCK" "${dir}" "ORIG_SSH_AUTH_SOCK" >&2
      return 1
    fi
    ORIG_SSH_AUTH_SOCK="${SSH_AUTH_SOCK}"
    readonly ORIG_SSH_AUTH_SOCK
    export ORIG_SSH_AUTH_SOCK
  fi

  SSH_AUTH_SOCK="${dir}/ssh-auth-sock-${HOSTNAME/lan/local}-${USER}"
  # Skip checks if -f was passed or if $SSH_CLIENT is not set (because then I'm
  # on the local machine and I should be using the local ssh-agent rather than
  # the remote one).
  # If the link points at a newer file do not update it to point to our file.
  # Beware: there is one case where this will not work correctly:
  # - start tmux on the local machine.
  # - ssh in, update ssh socket link, and reconnect tmux to the ssh session.
  # - bash on the local machine displays the prompt, updating the link
  #   incorrectly.
  if [ "${force_update}" -eq 0 ] \
      && [ -n "${SSH_CLIENT:-}" ] \
      && [ -e "${SSH_AUTH_SOCK}" ] \
      && [ "${SSH_AUTH_SOCK}" -nt "${ORIG_SSH_AUTH_SOCK}" ]; then
    printf "%s is newer than %s, not changing; use -f to force\\n" \
      "${SSH_AUTH_SOCK}" "${ORIG_SSH_AUTH_SOCK}" >&2
    return 1
  fi
  ln -s -f -n "${ORIG_SSH_AUTH_SOCK}" "${SSH_AUTH_SOCK}"
}

# Function to be run every time my prompt is displayed.
function prompt_command() {
  exit_status="$?"
  # Exit status 146/148 happens when you suspend something.
  case "${exit_status}" in
    0|146|148)
      :
      ;;
    *)
      printf "\\033[01;31mExit status: %s\\033[0m\\n" "${exit_status}"
      ;;
  esac
  if [ -z "${TMUX:-}" ]; then
    # Set the xterm title.  Tmux does this if it's running.
    printf "\\033]0;%s on %s\\007" "${SHELL##*/}" "${HOSTNAME}"
  else
    if [ "${USER}" != "johntobin" ]; then
      # Put the user in the tmux pane title to warn me it's a different user.
      tmux rename-window -t "${TMUX_PANE}" "${USER}"
    fi
  fi
  prompt_command_shell_specific
  prompt_command_extras
}
prompt_command_shell_specific() {
  true
}
prompt_command_extras() {
  true
}
